
import os
import pandas as pd
from PyPDF2 import PdfReader

# Folder paths for PDF and Excel files
pdf_folder = 'path_to_pdf_folder'
excel_folder = 'path_to_excel_folder'

# Function to check the type of PDF from the first page text
def check_pdf_type(pdf_path):
    reader = PdfReader(pdf_path)
    first_page = reader.pages[0]
    text = first_page.extract_text().lower()
    
    if 'sbi' in text:
        return 'SBI'
    elif 'birla' in text:
        return 'Birla'
    elif 'icici' in text:
        return 'ICICI'
    else:
        return 'Unknown'

# Function to open the corresponding Excel file (same name as PDF)
def open_excel_file(pdf_file):
    excel_filename = pdf_file.replace('.pdf', '.xlsx')  # Replace .pdf with .xlsx
    excel_path = os.path.join(excel_folder, excel_filename)
    
    if os.path.exists(excel_path):
        print(f"Opening Excel file: {excel_filename}")
        df = pd.read_excel(excel_path)
        return df
    else:
        print(f"No Excel file found for {pdf_file}")
        return None

# Process PDFs
for pdf_file in os.listdir(pdf_folder):
    if pdf_file.endswith('.pdf'):
        pdf_path = os.path.join(pdf_folder, pdf_file)
        pdf_type = check_pdf_type(pdf_path)
        
        if pdf_type != 'Unknown':
            print(f"{pdf_file} is of type {pdf_type}")
            df = open_excel_file(pdf_file)
            if df is not None:
                # Perform operations with the DataFrame
                print(df.head())
        else:
            print(f"{pdf_file} could not be identified as SBI, Birla, or ICICI.")






import os
import re
import pandas as pd

# Main directories for storing all files
base_dir = "data"
pdf_dir = os.path.join(base_dir, "pdfs")
excel_dir = os.path.join(base_dir, "excels")
output_dir = os.path.join(base_dir, "outputs")

# Ensure base directories exist
os.makedirs(base_dir, exist_ok=True)
os.makedirs(pdf_dir, exist_ok=True)
os.makedirs(excel_dir, exist_ok=True)
os.makedirs(output_dir, exist_ok=True)

# Function to check if the PDF file matches the condition (SBI, Birla, ICICI, etc.)
def check_file_type(pdf_file_path):
    with open(pdf_file_path, 'rb') as file:
        # Replace this with actual PDF text extraction logic
        pdf_text = extract_text_from_pdf(file)
        
        # Define patterns for different categories (SBI, Birla, ICICI)
        patterns = {
            'sbi': r"\b(sbimf|sbi premiers liquid fund|sbi mutual fund)\b",
            'birla': r"\b(birla|birla sun life)\b",
            'icici': r"\b(icici|icici prudential)\b"
        }
        
        # Check which pattern matches the PDF text
        for key, pattern in patterns.items():
            if re.search(pattern, pdf_text, re.IGNORECASE):
                return key
    return None

# Function to process PDF and Excel for each type (e.g., SBI, Birla, ICICI)
def run_main_code(pdf_file, excel_file):
    # Placeholder main code that returns a DataFrame after processing
    print(f"Running main code for PDF: {pdf_file} and Excel: {excel_file}")
    
    # Create a dummy DataFrame for demonstration
    data = {
        'Column1': ['Value1', 'Value2'],
        'Column2': ['Value3', 'Value4']
    }
    df = pd.DataFrame(data)
    
    return df

# Main function to process files
def process_files():
    # Get all PDF files from the pdf directory
    pdf_files = [f for f in os.listdir(pdf_dir) if f.endswith('.pdf')]
    
    if pdf_files:
        for pdf_file in pdf_files:
            pdf_file_path = os.path.join(pdf_dir, pdf_file)
            
            # Check the type of file (SBI, Birla, ICICI, etc.)
            file_type = check_file_type(pdf_file_path)
            if file_type:
                print(f"{file_type.upper()} condition met in {pdf_file}")
                
                # Create specific directories for the file type (e.g., sbi, birla, icici)
                specific_pdf_dir = os.path.join(base_dir, file_type, "pdf")
                specific_excel_dir = os.path.join(base_dir, file_type, "excel")
                specific_output_dir = os.path.join(base_dir, file_type, "output")
                
                # Ensure directories exist
                os.makedirs(specific_pdf_dir, exist_ok=True)
                os.makedirs(specific_excel_dir, exist_ok=True)
                os.makedirs(specific_output_dir, exist_ok=True)
                
                # Move the PDF file to the appropriate directory
                os.rename(pdf_file_path, os.path.join(specific_pdf_dir, pdf_file))
                
                # Find a corresponding Excel file (assuming the same naming pattern)
                excel_files = [f for f in os.listdir(excel_dir) if file_type in f.lower() and f.endswith('.xlsx')]
                
                if excel_files:
                    excel_file_path = os.path.join(excel_dir, excel_files[0])
                    # Move the Excel file to the specific directory
                    os.rename(excel_file_path, os.path.join(specific_excel_dir, excel_files[0]))
                    
                    # Run the main code using both PDF and Excel files and get DataFrame
                    df = run_main_code(pdf_file_path, excel_file_path)
                    
                    # Save the DataFrame to the output directory as a CSV file
                    output_file = os.path.join(specific_output_dir, f"{file_type}_output.csv")
                    df.to_csv(output_file, index=False)
                    print(f"DataFrame saved as {output_file}")
                else:
                    print(f"No Excel file found for {file_type.upper()}.")
            else:
                print(f"No matching condition found in {pdf_file}")
    else:
        print("No PDF files found.")

# Placeholder function for extracting text from PDF
def extract_text_from_pdf(file):
    # Dummy function. Replace with actual PDF text extraction code.
    return "Sample text with sbi mutual fund"

# Execute the script
if __name__ == "__main__":
    process_files()

















import os
import re
import pandas as pd

# Main directories for storing all files
base_dir = "data"
pdf_dir = os.path.join(base_dir, "pdfs")
excel_dir = os.path.join(base_dir, "excels")
output_dir = os.path.join(base_dir, "outputs")

# Ensure base directories exist
os.makedirs(base_dir, exist_ok=True)
os.makedirs(pdf_dir, exist_ok=True)
os.makedirs(excel_dir, exist_ok=True)
os.makedirs(output_dir, exist_ok=True)

# Function to check if the PDF file matches the condition (SBI, Birla, ICICI, etc.)
def check_file_type(pdf_file_path):
    with open(pdf_file_path, 'rb') as file:
        # Replace this with actual PDF text extraction logic
        pdf_text = extract_text_from_pdf(file)
        
        # Define patterns for different categories (SBI, Birla, ICICI)
        patterns = {
            'sbi': r"\b(sbimf|sbi premiers liquid fund|sbi mutual fund)\b",
            'birla': r"\b(birla|birla sun life)\b",
            'icici': r"\b(icici|icici prudential)\b"
        }
        
        # Check which pattern matches the PDF text
        for key, pattern in patterns.items():
            if re.search(pattern, pdf_text, re.IGNORECASE):
                return key
    return None

# Function to process PDF and Excel for each type (e.g., SBI, Birla, ICICI)
def run_main_code(pdf_file, excel_file):
    # Placeholder main code that returns a DataFrame after processing
    print(f"Running main code for PDF: {pdf_file} and Excel: {excel_file}")
    
    # Create a dummy DataFrame for demonstration
    data = {
        'Column1': ['Value1', 'Value2'],
        'Column2': ['Value3', 'Value4']
    }
    df = pd.DataFrame(data)
    
    return df

# Main function to process files
def process_files():
    # Get all PDF files from the pdf directory
    pdf_files = [f for f in os.listdir(pdf_dir) if f.endswith('.pdf')]
    
    if pdf_files:
        for pdf_file in pdf_files:
            pdf_file_path = os.path.join(pdf_dir, pdf_file)
            
            # Check the type of file (SBI, Birla, ICICI, etc.)
            file_type = check_file_type(pdf_file_path)
            if file_type:
                print(f"{file_type.upper()} condition met in {pdf_file}")
                
                # Create specific directories for the file type (e.g., sbi, birla, icici)
                specific_pdf_dir = os.path.join(base_dir, file_type, "pdf")
                specific_excel_dir = os.path.join(base_dir, file_type, "excel")
                specific_output_dir = os.path.join(base_dir, file_type, "output")
                
                # Ensure directories exist
                os.makedirs(specific_pdf_dir, exist_ok=True)
                os.makedirs(specific_excel_dir, exist_ok=True)
                os.makedirs(specific_output_dir, exist_ok=True)
                
                # Move the PDF file to the appropriate directory
                os.rename(pdf_file_path, os.path.join(specific_pdf_dir, pdf_file))
                
                # Find a corresponding Excel file (assuming the same naming pattern)
                excel_files = [f for f in os.listdir(excel_dir) if file_type in f.lower() and f.endswith('.xlsx')]
                
                if excel_files:
                    excel_file_path = os.path.join(excel_dir, excel_files[0])
                    # Move the Excel file to the specific directory
                    os.rename(excel_file_path, os.path.join(specific_excel_dir, excel_files[0]))
                    
                    # Run the main code using both PDF and Excel files and get DataFrame
                    df = run_main_code(pdf_file_path, excel_file_path)
                    
                    # Save the DataFrame to the output directory as a CSV file
                    output_file = os.path.join(specific_output_dir, f"{file_type}_output.csv")
                    df.to_csv(output_file, index=False)
                    print(f"DataFrame saved as {output_file}")
                else:
                    print(f"No Excel file found for {file_type.upper()}.")
            else:
                print(f"No matching condition found in {pdf_file}")
    else:
        print("No PDF files found.")

# Placeholder function for extracting text from PDF
def extract_text_from_pdf(file):
    # Dummy function. Replace with actual PDF text extraction code.
    return "Sample text with sbi mutual fund"

# Execute the script
if __name__ == "__main__":
    process_files()






















import re




# Your input string
text = "This is about SBI Premiers Liquid Fund and SBIMF."

#

Regex pattern (case-insensitive due to re.IGNORECASE)
pattern = r"\b(sbimf|sbi premiers liquid fund|sbi mutual fund)\b"

# Check if the pattern exists in the text (case-insensitive)
if re.search(pattern, text, re.IGNORECASE):
    print("Match found!")
else:
    print("No match.")




# Sample list
my_list = ['Purchase', 'Redemption', 'Transfer', 'Redemption', 'Dividend']

# Remove all occurrences of 'Redemption'
my_list = [item for item in my_list if item != 'Redemption']

print(my_list)




import re

# Example list containing a mix of values, including a date in "DD/MM/YYYY" format
my_list = ["01/10/2024", "Value1", "13/02/2024", "Value2", "Some text", "01/08/2023"]

# Define the regex pattern for matching dates in "DD/MM/YYYY" format
date_pattern = r"\b\d{2}/\d{2}/\d{4}\b"

# Remove dates from the list using list comprehension and regex
filtered_list = [item for item in my_list if not re.match(date_pattern, item)]

print(filtered_list)







(\b\d{2}-(?:[A-Za-z]{3})-\d{4}\b|\b\d{2}/\d{2}/\d{4}\b)(?:\s+(\S+)){5}





import re

# Sample text to search
text = "Some text before the date 01-Aug-2024 Value1 Value2 Value3 Value4 Value5 Value6 Some more text."

# Regex pattern
pattern = r"(\b\d{2}-(?:[A-Za-z]{3})-\d{4}\b|\b\d{2}/\d{2}/\d{4}\b)(.*?)(?:\s+(\S+)){1,5}"

# Find all matches
matches = re.findall(pattern, text)

# Extract and format the matches
results = []
for match in matches:
    # match[0] is the date, match[1] is everything between the date and the values, and match[2:] are the next 5 values.
    date = match[0]
    values = [match[i] for i in range(2, len(match))]
    results.append((date, values))

# Output results
for result in results:
    print(f"Date: {result[0]}, Values: {result[1]}")








# Sample lists
list1 = ["apple", "banana", "cherry"]
list2 = [2, 3, 1]

# Repeat each string in list1 according to the corresponding integer in list2
result = [s for s, n in zip(list1, list2) for _ in range(n)]

print(result)


